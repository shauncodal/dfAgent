// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qxLLKwULJsF1RX2EtKrYht
// Component: td9OePBYoqPzf
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: cfcHxjSbPUtDC/component
import { useScreenVariants as useScreenVariantsx1UNqhXk2AoWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: x1UNqhXk2aoWg/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_ews_df_agent.module.css"; // plasmic-import: qxLLKwULJsF1RX2EtKrYht/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: td9OePBYoqPzf/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: mD-s-BkpV1Hz4W/icon
import ArrowDownsvgIcon from "./icons/PlasmicIcon__ArrowDownsvg"; // plasmic-import: 1Pa4Ev-YC_hjWU/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: g0I1hW7-iOH9pa/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 8EwjdRHA4u-2d1/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: 7WjCsdpiHPKOPj/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: jP26yiFFfdoltj/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 8H7Obl_C1pM6fH/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: XVjBOBVCUhg4ke/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 1UkUhHahktsq_i/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsx1UNqhXk2AoWg()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aVg72)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xJnqa)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tMqhH)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wpR1N)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__joEyK)}
                      displayHeight={"default"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"96px"}
                      src={{
                        src: "/plasmic/ews_df_agent/images/_597746858337630069814254548494001392582656Npng.png",
                        fullWidth: 1200,
                        fullHeight: 1200,
                        aspectRatio: undefined
                      }}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ftMlP)}
                    >
                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ujci0
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {true ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pmkOh
                              )}
                              role={"img"}
                            />
                          ) : null}

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5T3Wn
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Services"
                                : "ABOUT"}
                            </div>
                          ) : null}

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1L08V
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}

                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___9Yyex
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bD36
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__byoTq
                            )}
                          >
                            {"Features"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bZjgb
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}

                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__iCyvM
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Xj1J
                              )}
                              role={"img"}
                            />
                          ) : null}

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jLsO7
                              )}
                            >
                              {"work"}
                            </div>
                          ) : null}

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5WoA
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__gzg3C
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kZzov
                            )}
                            role={"img"}
                          />
                        ) : null}

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nooC3
                            )}
                          >
                            {"Contact"}
                          </div>
                        ) : null}

                        {false ? (
                          <IconIcon
                            className={classNames(projectcss.all, sty.svg__iCb)}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ajwnn
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pHkbq
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eEZlT
                            )}
                          >
                            {"Company"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p47JL
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jLmP)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__uoStj
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fuTq
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__mq9Do)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__noKbw
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__lmMtv)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__zoTKw
              )}
            >
              {"DigitalFlyer SA"}
            </h1>

            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kdWUk
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>

                    {
                      <h6
                        data-plasmic-name={"h6"}
                        data-plasmic-override={overrides.h6}
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"              DigitalFlyer SA"}
                          </span>
                        </React.Fragment>
                      </h6>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ) : null}

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__eSSc4
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "       We help your business grow : Visibility and Accessability\n\n"
                      }
                    </React.Fragment>

                    {
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : ""}
                      </span>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "       We help your business grow : Visibility and Accessability\n\n"
                      }
                    </React.Fragment>

                    {
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : ""}
                      </span>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                )}
              </h1>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vsPis)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pltvZ
                      )}
                    >
                      {"BRAND | PRODUCT | DIGITAL"}
                    </div>
                  ) : null}

                  {true ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__jk8Fy)}
                      displayHeight={"100px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__u3E2R)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ti0M)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "238px"
                    : "380px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "202px"
                    : "286px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/ews_df_agent/images/ewsPicjpegjpg.jpeg",
                  fullWidth: 1816,
                  fullHeight: 2924,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l7KL3
                )}
              >
                {
                  "Hi , I'm Elmarie Watson-Smith, and I have a great passion for helping small businesses expand their digital footprint. At DigitalFlyer SA, community is at the heart of everything we do.  We've created an online business marketplace where each business member can create a Web page, e-commerce store, online bookings, events and ticket sales at an affordable price. \n\nWe've made our platform simple to use for any type of business, no technical skills required. Not only do we want your customers to find you easily, but we'll show you how to manage your own profile. So whether you have a small side-hustle or just need more traffic to your existing website, DigitalFlyer can assist. I will guide you through the process and support you with any questions you may have to get your profile up and running and your business connecting with more customers."
                }
              </div>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___0LsVg)}>
                {true ? (
                  <ArrowDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__cuWvd)}
                    role={"img"}
                  />
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__navji)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "82px"
                      : "82px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "260px"
                      : "250px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/dfLogopng.png",
                    fullWidth: 193,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__qJjRz)}>
              <div className={classNames(projectcss.all, sty.freeBox__f92OP)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__g6GKy
                  )}
                >
                  {"Business membership at only R1199 per year!"}
                </h1>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__onr7H)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zuWa2)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "152px"
                      : "391px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "348px"
                      : "851px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/_27780135050087385624972176996849398250462734Njpg.jpeg",
                    fullWidth: 843,
                    fullHeight: 520,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__svPZr)}>
              <div className={classNames(projectcss.all, sty.freeBox___8GMIr)}>
                <div className={classNames(projectcss.all, sty.freeBox__rpmyU)}>
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b5GbW
                      )}
                    >
                      {"ABOUT"}
                    </div>
                  ) : null}

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cjB52
                      )}
                    >
                      {"ABOUT"}
                    </div>
                  ) : null}

                  {true ? (
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__d1JrW
                      )}
                    >
                      {
                        "We give you the tools so your customers can find you anywhere!"
                      }
                    </h2>
                  ) : null}

                  {true ? (
                    <section
                      className={classNames(projectcss.all, sty.section__xTrpr)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"foreground"}
                        data-plasmic-override={overrides.foreground}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___448th
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kdeRn
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lc1C0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__msye8
                                )}
                              >
                                <Icon21Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__bbV2F
                                  )}
                                  role={"img"}
                                />
                              </div>

                              {false ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__h7Jq3
                                  )}
                                >
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__glV3A
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4PkbB
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__yxtwZ
                                  )}
                                >
                                  {"ABOUT"}
                                </h3>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eNqv1
                                  )}
                                >
                                  {
                                    "Nulla odio mauris enim parturient adipiscing vestibulum inceptos."
                                  }
                                </div>
                              </p.Stack>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gCWpw
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wnH4
                                )}
                              >
                                <Icon18Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__iBgf4
                                  )}
                                  role={"img"}
                                />
                              </div>

                              {false ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q8KP
                                  )}
                                >
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vopDz
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___8Jb4M
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__anauM
                                  )}
                                >
                                  {"PRODUCT"}
                                </h3>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hUnO9
                                  )}
                                >
                                  {
                                    "Consequat scelerisque a eros taciti nisl a sodales."
                                  }
                                </div>
                              </p.Stack>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___8T4OL
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5Zbii
                                )}
                              >
                                <Icon22Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__lp2C
                                  )}
                                  role={"img"}
                                />
                              </div>

                              {false ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__b0V5L
                                  )}
                                >
                                  <Icon8Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aiaut
                                    )}
                                    role={"img"}
                                  />
                                </div>
                              ) : null}

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ieSvr
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3___6Zj9
                                  )}
                                >
                                  {"DIGITAL"}
                                </h3>

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__d5Wb
                                  )}
                                >
                                  {
                                    "Varius ad malesuada ullamcorper cursus scelerisque a a."
                                  }
                                </div>
                              </p.Stack>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </section>
                  ) : null}
                </div>
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___7WEz6)}>
            <div className={classNames(projectcss.all, sty.freeBox__yq)}>
              <div className={classNames(projectcss.all, sty.freeBox__yf5RP)}>
                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jVPgn
                    )}
                  >
                    {"Downloads"}
                  </div>
                ) : null}

                {true ? (
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___2HQ5W
                    )}
                  >
                    {""}
                  </h2>
                ) : null}

                <section
                  className={classNames(projectcss.all, sty.section__ybSvU)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"foreground3"}
                    data-plasmic-override={overrides.foreground3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.foreground3)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wD98L)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jB3Ym
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gveTs
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uZn0Z
                            )}
                          >
                            <p.PlasmicImg
                              data-plasmic-name={"image1"}
                              data-plasmic-override={overrides.image1}
                              alt={""}
                              className={classNames(sty.image1)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "207px"
                                  : "auto"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/ews_df_agent/images/adobeStock278515907Jpeg.jpeg",
                                fullWidth: 6000,
                                fullHeight: 4000,
                                aspectRatio: undefined
                              }}
                            />
                          </div>

                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___6LkmL
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0ZDgN
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xtsnG
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__dnekl
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Customers can connect with you anytine, anywhere."
                                : "Customers can connect with you anytime, anywhere."}
                            </h3>

                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___71C3
                                )}
                              >
                                {
                                  "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the "
                                }
                              </div>
                            ) : null}

                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xEzmk
                                )}
                              >
                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__usM8F
                                    )}
                                    color={"softYellow"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__iSqVx
                                      )}
                                    >
                                      {"Read More"}
                                    </div>
                                  </Button>
                                ) : null}
                              </div>
                            ) : null}
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3FCt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lXjc
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__lz6Jb)}
                              displayHeight={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "207px"
                                  : "auto"
                              }
                              displayMaxHeight={"none"}
                              displayMaxWidth={"100%"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "311px"
                                  : "auto"
                              }
                              loading={"lazy"}
                              src={{
                                src: "/plasmic/ews_df_agent/images/adobeStock430974460Jpeg.jpeg",
                                fullWidth: 5973,
                                fullHeight: 3982,
                                aspectRatio: undefined
                              }}
                            />
                          </div>

                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aolpY
                              )}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__gkMvn
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wYuvG
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__xhy1L
                              )}
                            >
                              {
                                "Social media integrated,  expanding your customer reach."
                              }
                            </h3>

                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8HyUk
                                )}
                              >
                                {
                                  "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the "
                                }
                              </div>
                            ) : null}

                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ymxCc
                                )}
                              >
                                {true ? (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__hxaUn
                                    )}
                                    color={"softYellow"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__zFuI
                                      )}
                                    >
                                      {"Read More"}
                                    </div>
                                  </Button>
                                ) : null}
                              </div>
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </section>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__loefm)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ok4U
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "For more information or to arrange a demonstration, please connect with me on WhatsApp or via email.\n Or register here:"
                : "For more information or to arrange a demonstration, please connect with me on WhatsApp or via email.\n \nOr register here:"}
            </div>

            <Button
              data-plasmic-name={"registration"}
              data-plasmic-override={overrides.registration}
              className={classNames("__wab_instance", sty.registration)}
              color={"yellow"}
              shape={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? undefined
                  : undefined
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pfXPo
                )}
              >
                {"Register"}
              </div>
            </Button>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__gmWom)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___2AppP)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "133px"
                  : "287px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "367px"
                  : "auto"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/ews_df_agent/images/_29427551016953429641567544996016230823330327Npng.png",
                fullWidth: 1640,
                fullHeight: 624,
                aspectRatio: undefined
              }}
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jusCv)}>
            <div className={classNames(projectcss.all, sty.freeBox__wnkbk)}>
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c8XxA
                  )}
                >
                  {"CLIENTS"}
                </div>
              ) : null}

              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__ejG4T
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Our Partners"
                  : "Our Partners"}
              </h2>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gaxya)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hrXe2)}
                  displayHeight={"48px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"200px"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/netcashApprovedPartnerLogo1Png.png",
                    fullWidth: 701,
                    fullHeight: 200,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mHxze)}
                  displayHeight={"48px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"200px"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/coinPaymentsCoinPaymentsAnnouncesNewBrandingAsPartOf2020Jpg.jpeg",
                    fullWidth: 2696,
                    fullHeight: 1414,
                    aspectRatio: undefined
                  }}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__milvn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a5HVh
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "DigitalFlyer SA is the only platform in South Africa where each business member can have their own NetCash account linked to their page, no middle man, no extra fees from our side!"
                    : "DigitalFlyer SA is the only platform in South Africa where each business member can have their own NetCash account linked to their page, no middle man, no extra fees from our side!"}
                </div>

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dpwr6)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "42px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "152px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/dfLogopng.png",
                    fullWidth: 193,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }}
                />

                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zbQCy
                    )}
                  >
                    {"Lorem, TGS"}
                  </div>
                ) : null}

                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bukn6
                    )}
                  >
                    {"Company name lorem"}
                  </div>
                ) : null}
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pStB1)}>
            <div className={classNames(projectcss.all, sty.freeBox__xIgXw)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__n7H3M)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__g3Kt)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4UYaA)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"66px"}
                    src={{
                      src: "/plasmic/ews_df_agent/images/_597746858337630069814254548494001392582656Npng.png",
                      fullWidth: 1200,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__y7MGr)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qMePt
                        )}
                      >
                        {"Connect with us"}
                      </div>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vlq0S
                        )}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg___2Hu1)}
                          role={"img"}
                        />

                        <Icon2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0IJbS
                          )}
                          role={"img"}
                        />

                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__yje5D)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lT5Qe)}
                  >
                    {true ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__qAlBc
                        )}
                      >
                        {"Navigation"}
                      </h3>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__pnClz
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__srGeD
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f2Lr3
                          )}
                        >
                          {"Nav link"}
                        </div>

                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hO2P
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__flkqu
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s10Wv
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nYvOh
                          )}
                        >
                          {"Nav link"}
                        </div>

                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qffS7
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___9Csn5
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__nGsH)}
                          role={"img"}
                        />
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x75Rx
                          )}
                        >
                          {"Nav link"}
                        </div>
                      ) : null}

                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0PC6H
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__txOu)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__lOzPr
                      )}
                    >
                      {"Support"}
                    </h3>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___6Kvk6
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__sNdrN)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iwG0M
                        )}
                      >
                        {"Link"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__sAnkw)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mZjKj
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__jpOSn)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t2IOv
                        )}
                      >
                        {"FAQs"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__up37T)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__scmci
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__ffChO)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bOJgJ
                        )}
                      >
                        {"Status"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__bqwtL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__dqQsY
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg___2F6B)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pQpc
                        )}
                      >
                        {"Link"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__umUhL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h1J5W)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__tmsPk
                    )}
                  >
                    {"Contact:"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oXevu
                    )}
                  >
                    {"WhatsApp:  0822942736"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5LSq9
                    )}
                  >
                    {"Email:  elmariews@digitalflyer.co.za"}
                  </div>
                </p.Stack>
              </p.Stack>

              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ldSu
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "© Company. All rights reserved. Site proudly built with "
                      }
                    </React.Fragment>

                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__v7Mu1
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Plasmic"}
                      </p.PlasmicLink>
                    }

                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              ) : null}
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "foreground2",
    "h6",
    "span",
    "foreground",
    "foreground3",
    "image1",
    "registration"
  ],

  foreground2: ["foreground2", "h6", "span"],
  h6: ["h6"],
  span: ["span"],
  foreground: ["foreground"],
  foreground3: ["foreground3", "image1"],
  image1: ["image1"],
  registration: ["registration"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground2: makeNodeComponent("foreground2"),
    h6: makeNodeComponent("h6"),
    span: makeNodeComponent("span"),
    foreground: makeNodeComponent("foreground"),
    foreground3: makeNodeComponent("foreground3"),
    image1: makeNodeComponent("image1"),
    registration: makeNodeComponent("registration"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
