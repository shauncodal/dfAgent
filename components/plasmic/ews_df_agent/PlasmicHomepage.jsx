// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qxLLKwULJsF1RX2EtKrYht
// Component: td9OePBYoqPzf
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: cfcHxjSbPUtDC/component
import { useScreenVariants as useScreenVariantsx1UNqhXk2AoWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: x1UNqhXk2aoWg/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_ews_df_agent.module.css"; // plasmic-import: qxLLKwULJsF1RX2EtKrYht/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: td9OePBYoqPzf/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: mD-s-BkpV1Hz4W/icon
import ArrowDownsvgIcon from "./icons/PlasmicIcon__ArrowDownsvg"; // plasmic-import: 1Pa4Ev-YC_hjWU/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 8H7Obl_C1pM6fH/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: XVjBOBVCUhg4ke/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 1UkUhHahktsq_i/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsx1UNqhXk2AoWg()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aVg72)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xJnqa)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tMqhH)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wpR1N)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__joEyK)}
                      displayHeight={"default"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"96px"}
                      src={{
                        src: "/plasmic/ews_df_agent/images/_597746858337630069814254548494001392582656Npng.png",
                        fullWidth: 1200,
                        fullHeight: 1200,
                        aspectRatio: undefined
                      }}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ftMlP)}
                    >
                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___9Yyex
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bD36
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__byoTq
                            )}
                          >
                            {"Features"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bZjgb
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}

                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__iCyvM
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Xj1J
                              )}
                              role={"img"}
                            />
                          ) : null}

                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jLsO7
                              )}
                            >
                              {"work"}
                            </div>
                          ) : null}

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5WoA
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}

                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__gzg3C
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kZzov
                            )}
                            role={"img"}
                          />
                        ) : null}

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nooC3
                            )}
                          >
                            {"Contact"}
                          </div>
                        ) : null}

                        {false ? (
                          <IconIcon
                            className={classNames(projectcss.all, sty.svg__iCb)}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ajwnn
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pHkbq
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eEZlT
                            )}
                          >
                            {"Company"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__p47JL
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jLmP)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fuTq
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__mq9Do)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__noKbw
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__lmMtv)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>

            <h1
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1__zoTKw
              )}
            >
              {"DigitalFlyer SA"}
            </h1>

            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kdWUk
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>

                    {
                      <h6
                        data-plasmic-name={"h6"}
                        data-plasmic-override={overrides.h6}
                        className={classNames(
                          projectcss.all,
                          projectcss.h6,
                          projectcss.__wab_text,
                          sty.h6
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"              DigitalFlyer SA"}
                          </span>
                        </React.Fragment>
                      </h6>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ) : null}

              {true ? (
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__eSSc4
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "       We help your business grow : Visibility and Accessability\n\n"
                        }
                      </React.Fragment>

                      {
                        <span
                          data-plasmic-name={"span"}
                          data-plasmic-override={overrides.span}
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : ""}
                        </span>
                      }

                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "       We help your business grow : Visibility and Accessability\n\n"
                        }
                      </React.Fragment>

                      {
                        <span
                          data-plasmic-name={"span"}
                          data-plasmic-override={overrides.span}
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ""
                            : ""}
                        </span>
                      }

                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </h1>
              ) : null}

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vsPis)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pltvZ
                      )}
                    >
                      {"BRAND | PRODUCT | DIGITAL"}
                    </div>
                  ) : null}

                  {true ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__jk8Fy)}
                      displayHeight={"100px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"180px"}
                      loading={"lazy"}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__u3E2R)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__ti0M)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "238px"
                    : "448px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "202px"
                    : "278px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/ews_df_agent/images/ewsPicjpegjpg.jpeg",
                  fullWidth: 1816,
                  fullHeight: 2924,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l7KL3
                )}
              >
                {
                  "Hi , I'm Elmarie Watson-Smith\n \nAll start-up’s, side-hussle’s and even more established businesses face the same problems in this new online era. Customers want to find your business easily and if they can’t get a response quickly, they will move on to the next business. As a new business the cost of having a website and the monthly maintenance, can be a very costly affair. Even if you already have a website, to drive traffic to your website is becoming more of a challenge. \n\nDigitalFlyer came up with a simple and cost effective solution. With your DigitalFlyer membership you can create your own web page (business profile) by simply filling in a form. We will guide you through the process of adding products, create events, sell tickets or book appointments. The exciting part is that you will never pay any extra fees apart from your yearly membership and no more waiting for web developers to edit anything on your page. You are fully in control and can edit anything that changes on your profile very quickly\n. \nSo whether you have a small side-hustle or just need more traffic to your existing website, DigitalFlyer can assist. I will guide you through the process and support you with any questions you may have to get your profile up and running and your business connecting with more customers."
                }
              </div>
            </div>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox___0LsVg)}>
                {true ? (
                  <ArrowDownsvgIcon
                    className={classNames(projectcss.all, sty.svg__cuWvd)}
                    role={"img"}
                  />
                ) : null}

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__navji)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "82px"
                      : "82px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "260px"
                      : "250px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/dfLogopng.png",
                    fullWidth: 193,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }}
                />
              </div>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__qJjRz)}>
              <div className={classNames(projectcss.all, sty.freeBox__f92OP)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__g6GKy
                  )}
                >
                  {"Business membership at only R1199 per year!"}
                </h1>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__onr7H)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zuWa2)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "152px"
                      : "391px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "348px"
                      : "851px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/_27780135050087385624972176996849398250462734Njpg.jpeg",
                    fullWidth: 843,
                    fullHeight: 520,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__svPZr)}>
              <div className={classNames(projectcss.all, sty.freeBox___8GMIr)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rpmyU)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b5GbW
                        )}
                      >
                        {"ABOUT"}
                      </div>
                    ) : null}

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cjB52
                        )}
                      >
                        {"ABOUT"}
                      </div>
                    ) : null}

                    {true ? (
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__d1JrW
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"How can DigitalFlyer help your business?"}
                          </span>
                        </React.Fragment>
                      </h2>
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___7WEz6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g2TT
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Saves Time"}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {
                    "You don't have to be a marketing guru to promote and sell your goods, services or products. We will show you how to use your unique business url to create posts on social media."
                  }
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Slick payment solution"}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {
                    "Our seamless integration into Netcash eCommerce gatewat allows for easu payment with multiple payment options."
                  }
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Saves money"}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {
                    "Marketing and sales tools or services can be very expensive. A business membership is only R1199.00 per year, no other fees even when you sell products, services or tickets through our platform."
                  }
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Additional Functionality"}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {
                    "Business webpage, eCommerce, appointment bookings and events module, all on one platform."
                  }
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Easy to use"}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {
                    "For business owners and customers an easy to use web and mobile platform. Integrated solutions to make selling and buying quick and easy. "
                  }
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 300 }}
                >
                  {""}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {""}
                </span>

                <React.Fragment>{"\n"}</React.Fragment>

                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {""}
                </span>
              </React.Fragment>
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__loefm)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ok4U
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "For more information or to arrange a demonstration, please connect with me on WhatsApp or via email.\n Or register here:"
                : "For more information or to arrange a demonstration, please connect with me on WhatsApp or via email.\n \nOr register here:"}
            </div>

            <Button
              data-plasmic-name={"registration"}
              data-plasmic-override={overrides.registration}
              className={classNames("__wab_instance", sty.registration)}
              color={"yellow"}
              shape={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? undefined
                  : undefined
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pfXPo
                )}
              >
                {"Register"}
              </div>
            </Button>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__gmWom)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___2AppP)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "133px"
                  : "287px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "367px"
                  : "auto"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/ews_df_agent/images/_29427551016953429641567544996016230823330327Npng.png",
                fullWidth: 1640,
                fullHeight: 624,
                aspectRatio: undefined
              }}
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jusCv)}>
            <div className={classNames(projectcss.all, sty.freeBox__wnkbk)}>
              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c8XxA
                  )}
                >
                  {"CLIENTS"}
                </div>
              ) : null}

              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__ejG4T
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Our Partners"
                  : "Our Partners"}
              </h2>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gaxya)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hrXe2)}
                  displayHeight={"48px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"200px"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/netcashApprovedPartnerLogo1Png.png",
                    fullWidth: 701,
                    fullHeight: 200,
                    aspectRatio: undefined
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mHxze)}
                  displayHeight={"48px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"200px"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/coinPaymentsCoinPaymentsAnnouncesNewBrandingAsPartOf2020Jpg.jpeg",
                    fullWidth: 2696,
                    fullHeight: 1414,
                    aspectRatio: undefined
                  }}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__milvn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__a5HVh
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "DigitalFlyer SA is the only platform in South Africa where each business member can have their own NetCash account linked to their page, no middle man, no extra fees from our side!"
                    : "DigitalFlyer SA is the only platform in South Africa where each business member can have their own NetCash account linked to their page, no middle man, no extra fees from our side!"}
                </div>

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__dpwr6)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "30px"
                      : "42px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100px"
                      : "152px"
                  }
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/ews_df_agent/images/dfLogopng.png",
                    fullWidth: 193,
                    fullHeight: 64,
                    aspectRatio: undefined
                  }}
                />

                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zbQCy
                    )}
                  >
                    {"Lorem, TGS"}
                  </div>
                ) : null}

                {true ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bukn6
                    )}
                  >
                    {"Company name lorem"}
                  </div>
                ) : null}
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pStB1)}>
            <div className={classNames(projectcss.all, sty.freeBox__xIgXw)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__n7H3M)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__g3Kt)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4UYaA)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"66px"}
                    src={{
                      src: "/plasmic/ews_df_agent/images/_597746858337630069814254548494001392582656Npng.png",
                      fullWidth: 1200,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__y7MGr)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qMePt
                        )}
                      >
                        {"Connect with us"}
                      </div>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vlq0S
                        )}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg___2Hu1)}
                          role={"img"}
                        />

                        <Icon2Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0IJbS
                          )}
                          role={"img"}
                        />

                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__yje5D)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lT5Qe)}
                  >
                    {true ? (
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__qAlBc
                        )}
                      >
                        {"Navigation"}
                      </h3>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__pnClz
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__srGeD
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f2Lr3
                          )}
                        >
                          {"Nav link"}
                        </div>

                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hO2P
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    ) : null}

                    {true ? (
                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__flkqu
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s10Wv
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nYvOh
                          )}
                        >
                          {"Nav link"}
                        </div>

                        {false ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qffS7
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___9Csn5
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__nGsH)}
                          role={"img"}
                        />
                      ) : null}

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x75Rx
                          )}
                        >
                          {"Nav link"}
                        </div>
                      ) : null}

                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0PC6H
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__txOu)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__lOzPr
                      )}
                    >
                      {"Support"}
                    </h3>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___6Kvk6
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__sNdrN)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iwG0M
                        )}
                      >
                        {"Link"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__sAnkw)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mZjKj
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__jpOSn)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t2IOv
                        )}
                      >
                        {"FAQs"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__up37T)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__scmci
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__ffChO)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bOJgJ
                        )}
                      >
                        {"Status"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__bqwtL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__dqQsY
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg___2F6B)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pQpc
                        )}
                      >
                        {"Link"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__umUhL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__h1J5W)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__tmsPk
                    )}
                  >
                    {"Contact:"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oXevu
                    )}
                  >
                    {"WhatsApp:  0822942736"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5LSq9
                    )}
                  >
                    {"Email:  elmariews@digitalflyer.co.za"}
                  </div>
                </p.Stack>
              </p.Stack>

              {true ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ldSu
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "© Company. All rights reserved. Site proudly built with "
                      }
                    </React.Fragment>

                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__v7Mu1
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {"Plasmic"}
                      </p.PlasmicLink>
                    }

                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              ) : null}
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "button", "foreground2", "h6", "span", "registration"],
  button: ["button"],
  foreground2: ["foreground2", "h6", "span"],
  h6: ["h6"],
  span: ["span"],
  registration: ["registration"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    foreground2: makeNodeComponent("foreground2"),
    h6: makeNodeComponent("h6"),
    span: makeNodeComponent("span"),
    registration: makeNodeComponent("registration"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
